<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.thisteam.muhansangsa.mapper.EmployeesMapper">
	
	<!-- ============================= 인사관리 (사원 등록) ============================= -->
	
	<insert id="insertEmployee" >
			<selectKey keyProperty="idx" resultType="integer" order="BEFORE">
				SELECT MAX(idx) FROM employees
			</selectKey>
			INSERT 
				INTO employees
					VALUES (
						<choose>
							<when test="idx eq '0'">
							1
							</when>
							<otherwise>
							(#{idx} + 1)
							</otherwise>
						</choose>
						<choose>
							<when test="emp_num eq null">
							,1
							</when>
							<otherwise>
							, #{emp_num}
							</otherwise>
						</choose>
						,#{emp_name}
						,#{dept_cd}
						,#{grade_cd}
						,#{emp_tel}
						,#{emp_dtel}
						,#{emp_email}
						,#{emp_passwd}
						,#{emp_post_No}
						,#{emp_addr}
						,#{hire_date}
						,#{work_cd}
						,#{priv_cd}
						,#{photo}
					
					); 
		
		</insert>


		<!-- 사원 번호를 위한 부서코드 추출  --> 
		<select id="selectDepartmentCode" resultType="string">
			SELECT DEPT_CD
				FROM department
					WHERE DEPT_NAME = #{dept_cd}
		</select>

		<!-- 사원 번호를 위한 idx 추출 -->
		<select id="selectIdx" resultType="string">
			SELECT LPAD((MAX(idx) + 1) , 3, '0')
				FROM employees
		</select>
		
		<!-- ============================= 인사 관리 (사원 등록) ============================= -->
		
    
    
    

<!-- =============================== 인사관리 : 로그인(세원) =========================================  -->
	<!-- 로그인, 패스워드 확인  -->
	<select id="selectPass" resultType="string">
		SELECT emp_passwd
			FROM employees
			WHERE emp_email = #{emp_email}
	</select>

	<!-- 마이페이지 정보 조회 -->
	<!-- 로그인 id 는 sId = emp_email    -->
	<select id="selectMypageInfo" resultType="EmployeesVO">
	SELECT e.emp_num
			, e.emp_name
			, e.dept_cd
			, d.dept_name
			, e.grade_cd
            , g.grade_name
			, e.emp_tel
			, e.emp_dtel
			, e.emp_email
			, e.emp_passwd
			, e.emp_post_No
			, e.emp_addr
			, e.hire_date
			, e.work_cd 
			, e.photo
		FROM  employees e, department d, grade g
		WHERE 
		 	e.DEPT_CD = d.DEPT_CD
            AND e.grade_cd = g.grade_cd
			AND e.emp_email = #{id}
	</select>

	<!-- 마이페이지 수정 (업데이트 작업) -->
	<!--
	1) 패스워드가 null 또는 공백이 아닌경우를 위해 if조건문 사용
	2) 주의! 사진은 수정을 하지않은 경우가 있다!
	사진은 수정을 하지않은 경우가 있다! 다만 조건문이 없을 경우 기존 등록된 사진이 삭제되므로,
	if 조건문 사용(photo가 null 또는 공백이 아닌경우)
	-->
	<update id="updateMypageMember">
		UPDATE	employees 
			SET EMP_TEL = #{emp_tel}
				,EMP_DTEL = #{emp_dtel}
				<if test='emp_passwd != null and emp_passwd != ""'>
					,EMP_PASSWD = #{emp_passwd}
				</if>
				<if test='photo != null and photo !="" '>
					,PHOTO = #{photo}
				</if>
			WHERE 
				EMP_EMAIL = #{emp_email}
	</update>

	<!-- 상세페이지 수정(업데이트 작업) -->
	<!-- 사진 수정을 하지 않을 경우 기존 등록된 사진이 삭제되므로, if 조건문을 사용하여 이를 방지  -->
	<update id="updateDetail">
		UPDATE	employees 
			SET EMP_NUM = #{emp_num}
				,EMP_NAME = #{emp_name}
				,DEPT_CD = #{dept_cd}
				,GRADE_CD = #{grade_cd}
				,EMP_TEL = #{emp_tel}
				,EMP_DTEL = #{emp_dtel}
				,EMP_EMAIL = #{emp_email}
				,EMP_ADDR = #{emp_addr}
				,HIRE_DATE = #{hire_date}
				,WORK_CD = #{work_cd}
				<if test='photo != null and photo !="" '>
					,PHOTO = #{photo}
				</if>
			WHERE 
				EMP_EMAIL = #{emp_email}
	</update>




<!-- ===================================== hawon =========================================  -->
<!-- ===================================================================================================== -->
   <!-- ===================================== 사원 조회 시작===================================== -->
   <select id="selectMemberList" resultType="Emp_viewVO">
      <!-- 사원조회 -->
      SELECT   *
       FROM emp_view
          <if test="!keyword.equals('')">
         
         <!-- 2. 검색타입(searchType) 에 따른 WHERE 대상 변경 -->
         <!-- => 조건이 복수개이므로 choose 태그 사용 -->
         <choose>
            <when test="searchType.equals('emp_name')">
               WHERE EMP_NAME LIKE '%${keyword}%'
            </when>
            <when test="searchType.equals('emp_num')">
               WHERE EMP_NUM LIKE '%${keyword}%'
            </when>
            <when test="searchType.equals('emp_email')">
               WHERE EMP_EMAIL LIKE '%${keyword}%'
            </when>
            <when test="searchType.equals('dep_name')">
               WHERE DEPT_NAME LIKE '%${keyword}%'
            </when>
            <otherwise>
            
            </otherwise>
         </choose>      
         </if>
         
         LIMIT #{startRow}, #{listLimit}
      
   </select>
      
   <!-- 권한 조회 -->
   <select id="getPrivilege" resultType="String">
      SELECT PRIV_CD
      FROM employees
         WHERE EMP_EMAIL = #{id}
   </select>
   
   <!-- 사원 정보 수정 -->
   <update id="updateMember">
      UPDATE   employees 
         SET IDX = #{idx}
            ,EMP_NUM = #{emp_num}
            ,EMP_NAME = #{emp_name}
            ,DEPT_CD = #{dept_cd}
            ,GRADE_CD = #{grade_cd}
            ,EMP_TEL = #{emp_tel}
            ,EMP_DTEL = #{emp_dtel}
            ,EMP_EMAIL = #{emp_email}
            ,EMP_PASSWD = #{emp_passwd}
            ,HIRE_DATE = #{hire_date}
            ,WORK_CD = #{work_cd}
            ,PRIV_CD = #{priv_cd}
            ,PHOTO = #{photo}
         WHERE EMP_EMAIL = #{emp_email}
   
   </update>
   
   <!-- 사원 상세조회 -->
   <select id="selectEmployee" resultType="Emp_viewVO">
      SELECT *
      FROM emp_view
         WHERE EMP_EMAIL = #{emp_email}
      
   </select>
   
   <!-- 부서 직급 정보-->
   <select id="selectDeptInfo_count" resultType="HashMap">
      SELECT GRADE_NAME,count(GRADE_NAME) as count
      FROM emp_view e, department d
      WHERE e.DEPT_Name =d.DEPT_Name and  d.DEPT_CD = #{dept_cd} group by GRADE_NAME order by GRADE_cd desc 
   </select>
   
   <select id="selectDeptMember" resultType="Emp_viewVO">
      SELECT EMP_NUM,EMP_NAME , GRADE_NAME , EMP_TEL, EMP_DTEL, EMP_EMAIL
      FROM emp_view  
      WHERE DEPT_NAME = (select DEPT_NAME from department where DEPT_CD= #{dept_cd})
      order by GRADE_CD desc
   </select>
   
   <!--  -->
   <select id="selectDeptList" resultType="DepartmentVO">
      SELECT *
      FROM department
   
   </select>
   <select id="selectWorkList" resultType="WorksVO">
      SELECT *
      FROM works
   </select>
   
   <!-- 다수의 사원 부서정보 또는 재직상태 변경  -->
   <update id="updateEmpesInfo">
  	 UPDATE  employees 
         SET 
         <if test='updateObj eq "work"'>
         work_cd = (SELECT work_type from works where WORK_TYPE = #{work_type})
         </if>
         <if test='updateObj eq "dept"'>
         DEPT_CD  = (SELECT DEPT_CD from department where DEPT_NAME = #{dept_name})
         </if>
         WHERE EMP_NUM IN 
         <foreach collection="empList" item="emp" open="(" close=")" separator=",">
         	#{emp.emp_num}
         </foreach>
   </update>
   <!-- 페이징처리를 위한 작업 -->
   <select id="selectEmpListCount" resultType="int">
   		SELECT COUNT(*)
			FROM  emp_view -- 이후 작업 분기 일어남
			<if test="!keyword.equals('')">
				<!-- 2. 검색타입(searchType) 에 따른 WHERE 대상 변경 -->
				<!-- => 조건이 복수개이므로 choose 태그 사용 -->
				<choose>
		            <when test="searchType.equals('emp_name')">
		               WHERE EMP_NAME LIKE '%${keyword}%'
		            </when>
		            <when test="searchType.equals('emp_num')">
		               WHERE EMP_NUM LIKE '%${keyword}%'
		            </when>
		            <when test="searchType.equals('emp_email')">
		               WHERE EMP_EMAIL LIKE '%${keyword}%'
		            </when>
		            <when test="searchType.equals('dep_name')">
		               WHERE DEPT_NAME LIKE '%${keyword}%'
		            </when>
				</choose>		
			</if>
   
   </select>
   <!-- ===================================== 사원 조회 끝===================================== -->
   <!-- ===================================================================================================== -->

</mapper>
